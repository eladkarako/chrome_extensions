2.0.1.14
+ move logic to a browser-handled async block, by keeping 'action' as normal function, and moving all logic into a secodary 'async function async_action(){____}' block (which returns a promise, which isn't used for now). it simulates an old 'setTimeout(FUNCTION,0)'.

2.0.1.11
+ ignoring [loading="eager"] and [lazyload="off"] and lazify anyway (maybe I should condishen to avoid "unlazy"-webextension targets?)

2.0.1.10
+ provide additional information in the attribute 'data-lazify', regarding if the browser supports native lazyloading, or custom implementation was used. 

2.0.1.9
* additional repeat main method check, with alarms-api.

2.0.1.8
* additional prototype fix.
* element-query simplification to exclude all 'about:*' pages.

2.0.1.6
* excluding all embedded data SRC ('data:'), this simplifies the initial query as well.

2.0.1.5
* hard-coded excluding IFRAMES from '*.google.com'. Those are weird-a$$ $hit IFRAMES, most of them are logic-engines/loaders/API (such as captcha) which are DOM-located at the bottom of the page but CSS-static located in two-absolute containers where-as the captcha-form exist, is short- those do not plain nice with the lazyloading engine.
* excluding elements with SRC that loose-match 'about:*' and 'javascript:*' (IFRAMEs), those are not standard, and best not to handled even if were dynamically set (later) their SRC to a standard target.
* excluding  elements with BASE64-SRC (loose-match 'data:*base64') - those are already loaded in the body of the document and there is no-point-in 'saving traffic' by assigning LazyLoading to them, also they are possibly already LazyLoad'ed and containing a 'minimal base64 SRC', if the user will install my UnLazy-web-extension it will clear and (re)create a proper image with clear SRC, but as for now, it is best to understand the base64-SRC as a true-target, and not handling it.

2.0.1.4
* check intersection-value (effectivly the test to see if the element "is in" the viewport).
* apply min. 'exposure' of '1/10 percent' of the element inside the viewport for reaction..).

2.0.1.3
* making sure not to apply the polyfill which temp. removes 'src' and 'srcset' to an already loaded IMG/IFRAME, done using both image '.complete' attribute and custom 'onload' (that will be removed as-soon-as-possible) that will write 'complete' HTML-attribute on the tags, since IFRAME might not be have a reliable way of knowing if it finished loading (internal-document readyState-complete is only for 'src' in the same domain..).

2.0.1.1
+ apply new attributes when possible for images and iframes.
+ apply polyfill I've implement myself for LazyLoading using 'IntersectionObserver', it uses 'data-lazify-src' for 'src' and 'data-lazify-srcset' for 'srcset', those are not detectable through UnLazy web-extension, so UnLazy can work well with Lazify.

1.0.0.1
+ Initial (no up-versioning while I've developed it...)
