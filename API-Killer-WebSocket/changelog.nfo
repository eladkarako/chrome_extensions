1.0.4.26
* explicitly and exclusivly use passive-events in all event-listeners (where using 'preventDefault' is not needed as a part of the functionality anyway). should improve page-performances.
* alternative check for main method 'action' when running from a different JavaScript file ('at_document_end.js'/'at_document_idle.js'), instead of try/catch which slows down performances due to extensive call-stack and prevents discoverying for other thrown errors.

1.0.4.25
+ move logic to a browser-handled async block, by keeping 'action' as normal function, and moving all logic into a secodary 'async function async_action(){____}' block (which returns a promise, which isn't used for now). it simulates an old 'setTimeout(FUNCTION,0)'.

1.0.4.24
* improving nullification process with additional reference removing- when possible object reference will be removed not just return undefined.

1.0.4.22
+ DOM-injection is done with an clean-closure context. no function name is needed.

1.0.4.21
+ injection engine - countering various security restrictions, by using three variation of the same nullifying code: inline-text, base64-src (domain-less data url) and blob-src (considered same domain as the web-page).
* injection engine - generic improvements - removing duplicated code.
+ reduced memory usage by cleaning-up DOM nodes/objects after they are done.
+ nullification engine - improved nullification for function/class/constructor based non-strictly-speaking objects.
* generic improvements for easier maintaining  - function name is generic (but its content is not naturally), for injecting - the function name is generated from the description.
+ try/catch are added on various end-points of DOM-manipulation or referencing data from web-extension-client-side on actual client-side (calling "action" method for example).
+ adding more dynamic-content related events to trigger main action.

1.0.3.10
* removed manually-generated string of the core-DOM function, in-favor of grabbing the actual-function string ('.toString') with reduced whitespace, this because of Mozilla-reviewers keeping flagging the string-injection as an obfuscated code (it is not).
+ added execution from DOM-aspect.

1.0.3.8
* permission update for closed-tabs check before updating web-extension badge-number.

1.0.3.7
* minor change in the code-injection, wrapping with some proper XHTML-content 'protection'.

1.0.3.3
* generator-tools such as TinyMCE that are using an IFRAME to generate dynamic-HTML can display my injected SCRIPT-elements as a text, I'm applying a "strong override style" to avoid those from being displayed (as plain text). This is actually a bug-fix for TinyMCE (workaround from my end..).

1.0.3.1
* improving JavaScript-related removing of WebSocket methods.

1.0.2.13
* changed the way the SRC is stored internally, instead of using the content of the 'api_killer_websocket' function dynamically, simply put the string there as it is, which seems to run faster and is more compatible with whitespace across OS.

1.0.2.9
* slight engine modification.

1.0.2.8
* holding element-query multi-line string without the use of multiline method.

1.0.2.7
* improving cross-browser-API compatibility.

1.0.2.6
* explicit apply changes only for text/html pages.
+ adding support for about:blank pages.

1.0.2.5
+ adding action-counter in icon-badge.

1.0.2.4
* improving injected-script by applying its content with innerHTML to workaround text-nodes are unavailable in early page-loading stages.

1.0.2.1
* improved DOM script-injection with blocking mode for making sure it will effect from the very start.

1.0.1.5
+ error handling with tab closing too fast.

1.0.1.4
+ added support for Chrome's idle state.
- reduce package size.
- limit re-discovery to once per-page life-cycle state-change (load/ready).

1.0.1.3
* improved method applying mode.

1.0.1.2
+ null'ify the DOM's WebSocket Object.

1.0.0.1
+ initial.
